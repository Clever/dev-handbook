import { TSESLint } from "@typescript-eslint/experimental-utils";

import rule from "../lib/rules/no-catch-without-default-handling";

const ruleTester = new TSESLint.RuleTester({
  parserOptions: {
    sourceType: "module",
  },
  parser: require.resolve("@typescript-eslint/parser"),
});

ruleTester.run("no-catch-without-default-handling", rule, {
  valid: [
    // Simple catch
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        console.error(err);
      }
    }
    `,
    // Rethrows the error
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err instanceof Service.Errors.NotFound) {
          return [];
        }
        throw err;
      }
    }
    `,
    // Rethrows the error in an "else"
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err instanceof Service.Errors.NotFound) {
          return [];
        } else {
          throw err;
        }
      }
    }
    `,
    // Does something in each branch
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err.errorCode === "NotFound") {
          return [];
        } else if (err.errorCode === "BadRequest") {
          throw new UnauthorizedError("Unauthorized");
        } else {
          return { result: 0 };
        }
      }
    }
    `,
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err.errorCode === "NotFound") {
          return [];
        }
        if (err.errorCode === "BadRequest") {
          throw new UnauthorizedError("Unauthorized");
        }
        return { result: 0 };
      }
    }
    `,
    // Swallows error with comment
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err instanceof Service.Errors.NotFound) {
          return [];
        }
        // Swallow error
      }
    }
    `,
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        // Swallow error
        if (err instanceof Service.Errors.NotFound) {
          return [];
        }
      }
    }
    `,
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        if (err instanceof Service.Errors.NotFound) {
          return [];
        }
        // Swallow error
        if (err instanceof Service.Errors.Unauthorized) {
          return [];
        }
      }
    }
    `,
    `
    function doIt() {
      try {
        apiCall();
      } catch (err) {
        // We will allow the error to be automatically swallowed.
      }
    }
    `,
    `
    try {
      apiCall();
    }
    catch (err) {
      if (!(err instanceof tpsErrors.NotFound)) {
        throw err;
      }
      // Swallow the NotFound error
    }
    `,
    `
    try {
      apiCall();
    }
    catch (err) {
      if (err instanceof tpsErrors.NotFound) {
        // Swallow the NotFound error
      } else {
        throw err;
      }
    }
    `,
  ],
  invalid: [
    // Empty catch
    {
      code: `
      function doIt() {
        try {
          apiCall();
        } catch (err) {
          
        }
      }
      `,
      errors: [{ messageId: "implicitlySwallowedError" }],
    },
    // Unhandled branch
    {
      code: `
      function doIt() {
        try {
          apiCall();
        } catch (err) {
          if (err instanceof Service.Errors.NotFound) {
            return [];
          }
        }
      }
      `,
      errors: [{ messageId: "implicitlySwallowedError" }],
    },
    {
      code: `
      function doIt() {
        try {
          apiCall();
        } catch (err) {
          if (err instanceof Service.Errors.NotFound) {
            return [];
          } else if (err instanceof Service.Errors.Unauthorized) {
            console.error(err);
          }
        }
      }
      `,
      errors: [{ messageId: "implicitlySwallowedError" }],
    },
    // Comment not containing "swallow"
    {
      code: `
      function doIt() {
        try {
          apiCall();
        } catch (err) {
          // Am I forgetting something?
        }
      }
      `,
      errors: [{ messageId: "implicitlySwallowedError" }],
    },
    {
      code: `
      function doIt() {
        try {
          apiCall();
        } catch (err) {
          if (err instanceof Service.Errors.NotFound) {
            return [];
          }
          // Am I forgetting something?
        }
      }
      `,
      errors: [{ messageId: "implicitlySwallowedError" }],
    },
  ],
});
