"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("./shared");
exports.default = shared_1.createRule({
    name: "no-app-listen-without-localhost",
    meta: {
        type: "suggestion",
        docs: {
            description: "Prevents locally running applications from binding too broadly via 0.0.0.0",
            category: "Best Practices",
            recommended: false,
        },
        messages: {
            serverBindsTooBroadly: "Running Express server locally via app.listen() without specifing will run on all interfaces available i.e on 0.0.0.0.",
            serverMustBindBroadlyInProd: "Running Express server on '127.0.0.1' is expected during local development. However, during production, it must use 0.0.0.0. Consider using _IS_LOCAL env var to properly set the interface",
        },
        fixable: "code",
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        return {
            // TODO: Right now these just match on ".listen" function call with 2-3 arguments
            // Going forward, it should be restricted to be only on app.listen where app is an expres app.
            ":matches(CallExpression, OptionalCallExpression)[callee.property.name=listen][arguments.length=2]"(node) {
                context.report({
                    node,
                    messageId: "serverBindsTooBroadly",
                    fix: function (fixer) {
                        return [
                            fixer.insertTextBeforeRange(node.arguments[1].range, 'isLocal ? "localhost" : "0.0.0.0", '),
                            fixer.insertTextBefore(node, 'const isLocal = process.env._IS_LOCAL === "true";\n'),
                        ];
                    },
                });
            },
            ":matches(CallExpression, OptionalCallExpression)[callee.property.name=listen][arguments.length=3][arguments.1.value='0.0.0.0']"(node) {
                context.report({
                    node,
                    messageId: "serverBindsTooBroadly",
                });
            },
            ":matches(CallExpression, OptionalCallExpression)[callee.property.name=listen][arguments.length=3][arguments.1.value='127.0.0.1']"(node) {
                context.report({
                    node,
                    messageId: "serverMustBindBroadlyInProd",
                });
            },
        };
    },
});
