"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const experimental_utils_1 = require("@typescript-eslint/experimental-utils");
const shared_1 = require("./shared");
exports.default = shared_1.createRule({
    name: "no-catch-without-default-handling",
    meta: {
        type: "problem",
        docs: {
            description: `Prevents writing a catch block where the "default" branch has no statements. This often means some errors aren't being handled.`,
            category: "Possible Errors",
            recommended: false,
        },
        messages: {
            implicitlySwallowedError: "An error appears to be implicitly swallowed in the default branch of the catch block. If this is intended, add a comment containing the word 'swallow'.",
        },
        schema: [],
    },
    defaultOptions: [],
    create(context) {
        const sourceCode = context.getSourceCode();
        return {
            CatchClause(node) {
                if (sourceCode.getCommentsInside(node).some((comment) => isSwallowComment(comment))) {
                    return;
                }
                const catchBody = node.body;
                for (const statememt of catchBody.body) {
                    if (statememt.type === experimental_utils_1.AST_NODE_TYPES.IfStatement) {
                        if (doesIfStatementHaveElseBranch(statememt)) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                    const leadingComments = sourceCode.getCommentsBefore(statememt);
                    const trailingComments = sourceCode.getCommentsAfter(statememt);
                    if ([...leadingComments, ...trailingComments].some((comment) => isSwallowComment(comment))) {
                        return;
                    }
                }
                context.report({ node, messageId: "implicitlySwallowedError" });
            },
        };
    },
});
function doesIfStatementHaveElseBranch(ifStatement) {
    let currentIfStatement = ifStatement;
    while (currentIfStatement) {
        if (currentIfStatement.alternate &&
            currentIfStatement.alternate.type !== experimental_utils_1.AST_NODE_TYPES.IfStatement) {
            return true;
        }
        currentIfStatement = currentIfStatement.alternate;
    }
    return false;
}
function isSwallowComment(comment) {
    return comment.value.toLowerCase().includes("swallow");
}
