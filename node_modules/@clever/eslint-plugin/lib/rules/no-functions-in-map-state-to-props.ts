import { TSESLint } from "@typescript-eslint/experimental-utils";

import { createRule } from "./shared";

export default createRule({
  name: "no-functions-in-map-state-to-props",
  meta: {
    type: "suggestion",
    docs: {
      description: "Prevents returning functions from the mapStateToProps function",
      category: "Best Practices",
      recommended: false,
    },
    messages: {
      noFunctionInMapStateToProps:
        "returning functions (anonymous OR named) in mapStateToProps is not allowed, since they cause unnecessary re-renders.",
    },
    schema: [],
  },
  defaultOptions: [],
  create(context): TSESLint.RuleListener {
    return {
      /*
        The following rule is intended to check mapStateToProps functions of the form:
          function mapStateToProps() {
            return {
              name: () => {},
            };
          }
        Importantly, it is checking for a (non-arrow) function named mapStateToProps with an arrow
        function returned in the object of the return statement.
      */
      "FunctionDeclaration[id.name='mapStateToProps'] > BlockStatement > ReturnStatement > ObjectExpression > Property[value.type='ArrowFunctionExpression']"(
        node,
      ): void {
        context.report({
          node,
          messageId: "noFunctionInMapStateToProps",
        });
      },
      /*
        The following rule is intended to check mapStateToProps functions of the form:
          const mapStateToProps = () => {
            return {
              name: () => {},
            };
          }
      */
      "VariableDeclaration VariableDeclarator[id.name='mapStateToProps'][init.type='ArrowFunctionExpression'] > ArrowFunctionExpression > BlockStatement > ReturnStatement Property[value.type='ArrowFunctionExpression']"(
        node,
      ): void {
        context.report({
          node,
          messageId: "noFunctionInMapStateToProps",
        });
      },
      /*
        The following rule is intended to check mapStateToProps functions of the form:
          const mapStateToProps = () => ({
            name: () => {},
          });
      */
      "VariableDeclaration VariableDeclarator[id.name='mapStateToProps'][init.type='ArrowFunctionExpression'] > ArrowFunctionExpression[body.type='ObjectExpression'] > ObjectExpression > Property[value.type='ArrowFunctionExpression']"(
        node,
      ): void {
        context.report({
          node,
          messageId: "noFunctionInMapStateToProps",
        });
      },
    };
  },
});
