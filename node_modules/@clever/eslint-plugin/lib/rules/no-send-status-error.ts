import { TSESLint } from "@typescript-eslint/experimental-utils";

import { createRule } from "./shared";

export default createRule({
  name: "no-send-status-error",
  meta: {
    type: "suggestion",
    docs: {
      description: "Prevents using res.status and res.sendStatus with error status codes",
      category: "Best Practices",
      recommended: false,
    },
    messages: {
      noSendStatus:
        "using res.sendStatus with an error status code is not allowed. You should throw an exception instead, which the global error handler will handle.",
      noStatus:
        "using res.status with an error status code is not allowed. You should throw an exception instead, which the global error handler will handle.",
    },
    schema: [],
  },
  defaultOptions: [],
  create(context): TSESLint.RuleListener {
    // TODO: Right now these just match on ".status" and ".sendStatus",
    // regardless of the object it's called on. This means that "someRandomObject.status(500)"
    // will also be caught by this rule. This hasn't been a problem so far, but we should consider
    // making the rule more specific so it only errors if it's "res.sendStatus(500)".
    // This is a bit tricky since we also need to identify things like "res.json({}).status(500)".
    return {
      ":matches(CallExpression, OptionalCallExpression)[callee.property.name=sendStatus][arguments.0.value >= 400]"(
        node,
      ): void {
        context.report({
          node,
          messageId: "noSendStatus",
        });
      },
      ":matches(CallExpression, OptionalCallExpression)[callee.property.name=status][arguments.0.value >= 400]"(
        node,
      ): void {
        context.report({
          node,
          messageId: "noStatus",
        });
      },
    };
  },
});
