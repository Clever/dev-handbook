import { AST_NODE_TYPES, TSESLint, TSESTree } from "@typescript-eslint/experimental-utils";

import { createRule } from "./shared";

export default createRule({
  name: "no-catch-without-default-handling",
  meta: {
    type: "problem",
    docs: {
      description: `Prevents writing a catch block where the "default" branch has no statements. This often means some errors aren't being handled.`,
      category: "Possible Errors",
      recommended: false,
    },
    messages: {
      implicitlySwallowedError:
        "An error appears to be implicitly swallowed in the default branch of the catch block. If this is intended, add a comment containing the word 'swallow'.",
    },
    schema: [],
  },
  defaultOptions: [],
  create(context): TSESLint.RuleListener {
    const sourceCode = context.getSourceCode();
    return {
      CatchClause(node) {
        if (sourceCode.getCommentsInside(node).some((comment) => isSwallowComment(comment))) {
          return;
        }
        const catchBody = node.body;
        for (const statememt of catchBody.body) {
          if (statememt.type === AST_NODE_TYPES.IfStatement) {
            if (doesIfStatementHaveElseBranch(statememt)) {
              return;
            }
          } else {
            return;
          }
          const leadingComments = sourceCode.getCommentsBefore(statememt);
          const trailingComments = sourceCode.getCommentsAfter(statememt);
          if (
            [...leadingComments, ...trailingComments].some((comment) => isSwallowComment(comment))
          ) {
            return;
          }
        }
        context.report({ node, messageId: "implicitlySwallowedError" });
      },
    };
  },
});

function doesIfStatementHaveElseBranch(ifStatement: TSESTree.IfStatement): boolean {
  let currentIfStatement: TSESTree.IfStatement | null = ifStatement;
  while (currentIfStatement) {
    if (
      currentIfStatement.alternate &&
      currentIfStatement.alternate.type !== AST_NODE_TYPES.IfStatement
    ) {
      return true;
    }
    currentIfStatement = currentIfStatement.alternate;
  }
  return false;
}

function isSwallowComment(comment: TSESTree.Comment) {
  return comment.value.toLowerCase().includes("swallow");
}
